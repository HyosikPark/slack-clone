{"version":3,"sources":["webpack://frontend/./components/Modal/styles.ts","webpack://frontend/./components/Modal/Modal.tsx","webpack://frontend/./hooks/useSocket.ts","webpack://frontend/./layouts/Workspace/styles.ts","webpack://frontend/./components/Menu/style.ts","webpack://frontend/./components/Menu/Menu.tsx","webpack://frontend/./components/CreateChannelModal/CreateChannelModal.tsx","webpack://frontend/./components/CreateWorkspaceModal/CreateWorkspaceModal.tsx","webpack://frontend/./components/InviteWorkspaceModal/InviteWorkspaceModal.tsx","webpack://frontend/./components/DMList/styles.ts","webpack://frontend/./components/ChannelList/ChannelList.tsx","webpack://frontend/./components/DMList/DMList.tsx","webpack://frontend/./layouts/Workspace/Workspace.tsx","webpack://frontend/./utils/fetcher.ts"],"names":["CreateModal","Modal","children","show","removeBubbling","useCallback","e","stopPropagation","data-testid","onClick","React","sockets","useSocket","workspace","io","transports","disconnect","undefined","RightMenu","Header","ProfileImg","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","Channels","WorkspaceName","MenuScroll","WorkspaceModal","Chats","AddButton","WorkspaceButton","CreateMenu","Menu","style","defaultProps","closeButton","CreateChannelModal","onCloseModal","input","useRef","useParams","onCreateChannel","preventDefault","current","value","trim","axios","name","withCredentials","then","trigger","catch","err","console","dir","toast","response","data","position","onSubmit","id","ref","type","CreateWorkspaceModal","nameInput","urlInput","onCreateWorkspace","url","InviteWorkspaceModal","onInviteMember","email","CollapseButton","collapse","ChannelList","location","useLocation","userData","useSWR","fetcher","channelData","socket","channelCollapse","setChannelCollapse","useState","countList","setCountList","toggleChannelCollapse","prev","resetCount","list","useEffect","onMessage","content","match","find","v","toString","ChannelId","on","log","hasListeners","off","cursor","className","data-qa","aria-hidden","map","channel","count","key","activeClassName","to","DMList","memberData","onlineList","setOnlineList","SenderId","member","isOnline","includes","data-qa-presence-self","data-qa-presence-active","data-qa-presence-dnd","nickname","Channel","loadable","DirectMessage","Workspace","mutate","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","showCreateChannelModal","setShowCreateChannelModal","showWorkspaceModal","setShowWorkspaceModal","showInviteWorkspaceModal","setShowInviteWorkspaceModal","showInviteChannelModal","setShowInviteChannelModal","disconnectSocket","emit","channels","onLogout","onOpenModalAndMenu","target","onCloseModalAndMenu","src","gravatar","s","d","alt","right","top","ws","slice","toUpperCase","left","path","render","onOpenModal","component","res"],"mappings":"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","file":"957.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  top: 50%;\n  left: 50%;\n  transform: translate(-25%, -50%);\n  width: 440px;\n  background: white;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n  background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n  border-radius: 6px;\n  user-select: none;\n  max-width: 440px;\n  padding: 30px 40px 0;\n  z-index: 1012;\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { ModalProps } from '@typings/db';\nimport React, { useCallback } from 'react';\nimport { CreateModal } from './styles';\n\nfunction Modal({ children, show }: ModalProps) {\n  const removeBubbling = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <CreateModal data-testid=\"modal\" onClick={removeBubbling}>\n      {children}\n    </CreateModal>\n  );\n}\n\nexport default React.memo(Modal);\n","import { useCallback } from 'react';\nimport io from 'socket.io-client';\n\nconst BACK_URL = 'http://localhost:3095';\nconst sockets: { [key: string]: SocketIOClient.Socket } = {};\n\nexport default function useSocket(workspace: string): [SocketIOClient.Socket | undefined, () => void] {\n  if (!sockets[workspace])\n    sockets[workspace] = io.connect(`${BACK_URL}/ws-${workspace}`, {\n      transports: ['websocket'],\n    });\n\n  const disconnect = useCallback(() => {\n    if (workspace && !sockets[workspace]) return;\n\n    sockets[workspace].disconnect();\n    delete sockets[workspace];\n  }, [workspace]);\n\n  if (!workspace) return [undefined, disconnect];\n\n  return [sockets[workspace], disconnect];\n}\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: #350d36;\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n  cursor: pointer;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n\n  & img {\n    display: flex;\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: #3f0e40;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-right: 1px solid rgb(82, 38, 83);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const Channels = styled.nav`\n  width: 260px;\n  display: inline-flex;\n  flex-direction: column;\n  background: #3f0e40;\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n\n    &.selected {\n      color: white;\n    }\n  }\n\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: transparent;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n\n  & h2 {\n    padding-left: 20px;\n  }\n\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: transparent;\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const Chats = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  z-index: 1000;\n  position: absolute;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n  background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n  border-radius: 6px;\n  user-select: none;\n  min-width: 360px;\n  z-index: 512;\n  max-height: calc(100vh - 20px);\n  color: rgb(29, 28, 29);\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { MenuProps } from '@typings/db';\nimport React, { useCallback } from 'react';\nimport { CreateMenu } from './style';\n\nfunction Menu({ children, style, show }: MenuProps) {\n  const removeBubbling = useCallback((e) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) return null;\n\n  return (\n    <CreateMenu data-testid=\"menu\" style={style} onClick={removeBubbling}>\n      {children}\n    </CreateMenu>\n  );\n}\n\nMenu.defaultProps = {\n  closeButton: true,\n};\n\nexport default React.memo(Menu);\n","import Modal from '@components/Modal/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport axios from 'axios';\nimport React, { useCallback, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { toast } from 'react-toastify';\nimport { trigger } from 'swr';\nimport { SubmitModalProps } from '@typings/db';\n\nfunction CreateChannelModal({ show, onCloseModal }: SubmitModalProps) {\n  const input = useRef<HTMLInputElement>(null);\n\n  const { workspace } = useParams<{ workspace: string }>();\n\n  const onCreateChannel = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!input.current?.value.trim()) return;\n\n      axios\n        .post(\n          `/api/workspaces/${workspace}/channels`,\n          {\n            name: input.current?.value,\n          },\n          { withCredentials: true },\n        )\n        .then(() => {\n          trigger(`/api/workspaces/${workspace}/channels`);\n          onCloseModal();\n        })\n        .catch((err) => {\n          console.dir(err);\n          toast.error(err.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [onCloseModal, workspace],\n  );\n\n  return (\n    <Modal show={show}>\n      <form onSubmit={onCreateChannel}>\n        <Label id=\"workspace-label\">\n          <span>워크스페이스 이름</span>\n          <Input id=\"workspace\" ref={input} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n}\n\nexport default React.memo(CreateChannelModal);\n","import React, { useCallback, useRef } from 'react';\nimport Modal from '@components/Modal/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { toast } from 'react-toastify';\nimport axios from 'axios';\nimport { trigger } from 'swr';\nimport { SubmitModalProps } from '@typings/db';\n\nfunction CreateWorkspaceModal({ show, onCloseModal }: SubmitModalProps) {\n  const nameInput = useRef<HTMLInputElement>(null);\n  const urlInput = useRef<HTMLInputElement>(null);\n\n  const onCreateWorkspace = useCallback(\n    (e) => {\n      e.preventDefault();\n\n      if (!nameInput.current?.value.trim()) return;\n      if (!urlInput.current?.value.trim()) return;\n\n      axios\n        .post(\n          '/api/workspaces',\n          {\n            workspace: nameInput.current?.value,\n            url: urlInput.current?.value,\n          },\n          { withCredentials: true },\n        )\n        .then(() => {\n          trigger('/api/users');\n          onCloseModal();\n        })\n        .catch((err) => {\n          toast.error(err.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [onCloseModal],\n  );\n\n  return (\n    <Modal show={show}>\n      <form onSubmit={onCreateWorkspace}>\n        <Label id=\"workspace-label\">\n          <span>워크스페이스 이름</span>\n          <Input id=\"workspace\" ref={nameInput} />\n        </Label>\n        <Label id=\"workspace-url-label\">\n          <span>워크스페이스 url</span>\n          <Input id=\"workspace\" ref={urlInput} />\n        </Label>\n        <Button type=\"submit\">생성하기</Button>\n      </form>\n    </Modal>\n  );\n}\n\nexport default React.memo(CreateWorkspaceModal);\n","import Modal from '@components/Modal/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { SubmitModalProps } from '@typings/db';\nimport axios from 'axios';\nimport React, { useCallback, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { trigger } from 'swr';\nimport { toast } from 'react-toastify';\n\nfunction InviteWorkspaceModal({ show, onCloseModal }: SubmitModalProps) {\n  const { workspace } = useParams<{ workspace: string }>();\n  const input = useRef<HTMLInputElement>(null);\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!input.current?.value.trim()) return;\n\n      axios\n        .post(\n          `/api/workspaces/${workspace}/members`,\n          {\n            email: input.current.value,\n          },\n          { withCredentials: true },\n        )\n        .then(() => {\n          trigger(`/api/workspaces/${workspace}/members`);\n          onCloseModal();\n        })\n        .catch((err) => {\n          toast.error(err.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [onCloseModal, workspace],\n  );\n\n  return (\n    <Modal show={show}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>이메일</span>\n          <Input id=\"member\" type=\"email\" ref={input} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n}\n\nexport default React.memo(InviteWorkspaceModal);\n","import styled from '@emotion/styled';\n\nexport const CollapseButton = styled.button<{ collapse: boolean }>`\n  background: transparent;\n  border: none;\n  width: 26px;\n  height: 26px;\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  color: white;\n  margin-left: 10px;\n  cursor: pointer;\n\n  ${({ collapse }) =>\n    collapse &&\n    `\n    & i {\n      transform: none;\n    }\n  `};\n`;\n","import useSocket from '@hooks/useSocket';\nimport { CollapseButton } from '@components/DMList/styles';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useLocation, useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\nimport { fetcher } from '@utils/fetcher';\n\nfunction ChannelList() {\n  const { workspace } = useParams<{ workspace: string }>();\n  const location = useLocation();\n\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: channelData } = useSWR<IChannel[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n\n  const [socket] = useSocket(workspace);\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [countList, setCountList] = useState<{ [key: string]: number | undefined }>({});\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  const resetCount = useCallback(\n    (id) => () => {\n      setCountList((list) => {\n        return {\n          ...list,\n          [id]: undefined,\n        };\n      });\n    },\n    [],\n  );\n\n  useEffect(() => {\n    setCountList({});\n  }, [workspace, location]);\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      const mentions: string[] | null = data.content.match(/@\\[(.+?)]\\((\\d)\\)/g);\n      if (mentions?.find((v) => v.match(/@\\[(.+?)]\\((\\d)\\)/)![2] === userData?.id.toString())) {\n        return setCountList((list) => {\n          return {\n            ...list,\n            [`c-${data.ChannelId}`]: (list[`c-${data.ChannelId}`] || 0) + 1,\n          };\n        });\n      }\n      setCountList((list) => {\n        return {\n          ...list,\n          [`c-${data.ChannelId}`]: list[`c-${data.ChannelId}`] || 0,\n        };\n      });\n    },\n    [userData?.id],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n    console.log('socket on message', socket?.hasListeners('message'));\n    return () => {\n      socket?.off('message', onMessage);\n      console.log('socket off message', socket?.hasListeners('message'));\n    };\n  }, [onMessage, socket]);\n\n  return (\n    <>\n      <h2 style={{ cursor: 'pointer' }} onClick={toggleChannelCollapse}>\n        <CollapseButton collapse={channelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Channels</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          channelData?.map?.((channel) => {\n            const count = countList[`c-${channel.id}`];\n            return (\n              <NavLink\n                key={channel.name}\n                activeClassName=\"selected\"\n                to={`/workspace/${workspace}/channel/${channel.name}`}\n                onClick={resetCount(`c-${channel.id}`)}\n              >\n                <span className={count !== undefined && count >= 0 ? 'bold' : undefined}># {channel.name}</span>\n                {count !== undefined && count > 0 && <span className=\"count\">{count}</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n}\n\nexport default React.memo(ChannelList);\n","import { CollapseButton } from '@components/DMList/styles';\nimport useSocket from '@hooks/useSocket';\nimport { IDM, IUser, IUserWithOnline } from '@typings/db';\nimport { fetcher } from '@utils/fetcher';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router';\nimport { NavLink } from 'react-router-dom';\nimport useSWR from 'swr';\n\nfunction DMList() {\n  const { workspace } = useParams<{ workspace: string }>();\n  const [socket] = useSocket(workspace);\n\n  const { data: userData } = useSWR<IUser>('/api/users', fetcher);\n  const { data: memberData } = useSWR<IUserWithOnline[]>(\n    userData ? `/api/workspaces/${workspace}/members` : null,\n    fetcher,\n  );\n\n  const [channelCollapse, setChannelCollapse] = useState(false);\n  const [countList, setCountList] = useState<{ [key: string]: number }>({});\n  const [onlineList, setOnlineList] = useState<number[]>([]);\n\n  const toggleChannelCollapse = useCallback(() => {\n    setChannelCollapse((prev) => !prev);\n  }, []);\n\n  const resetCount = useCallback(\n    (id) => () => {\n      setCountList((list) => {\n        return {\n          ...list,\n          [id]: 0,\n        };\n      });\n    },\n    [],\n  );\n\n  const onMessage = (data: IDM) => {\n    setCountList((list) => {\n      return {\n        ...list,\n        [data.SenderId]: list[data.SenderId] ? list[data.SenderId] + 1 : 1,\n      };\n    });\n  };\n\n  useEffect(() => {\n    socket?.on('onlineList', (data: number[]) => {\n      setOnlineList(data);\n    });\n\n    socket?.on('dm', onMessage);\n\n    return () => {\n      socket?.off('dm', onMessage);\n      socket?.off('onlineList');\n    };\n  }, [socket]);\n\n  return (\n    <>\n      <h2 style={{ cursor: 'pointer' }} onClick={toggleChannelCollapse}>\n        <CollapseButton collapse={channelCollapse}>\n          <i\n            className=\"c-icon p-channel_sidebar__section_heading_expand p-channel_sidebar__section_heading_expand--show_more_feature c-icon--caret-right c-icon--inherit c-icon--inline\"\n            data-qa=\"channel-section-collapse\"\n            aria-hidden=\"true\"\n          />\n        </CollapseButton>\n        <span>Direct Messages</span>\n      </h2>\n      <div>\n        {!channelCollapse &&\n          memberData?.map?.((member) => {\n            const isOnline = onlineList.includes(member.id);\n            const count = countList[member.id] || 0;\n\n            return (\n              <NavLink\n                key={member.id}\n                activeClassName=\"selected\"\n                to={`/workspace/${workspace}/dm/${member.id}`}\n                onClick={resetCount(member.id)}\n              >\n                <i\n                  className={`c-icon p-channel_sidebar__presence_icon p-channel_sidebar__presence_icon--dim_enabled c-presence ${\n                    isOnline ? 'c-presence--active c-icon--presence-online' : 'c-icon--presence-offline'\n                  }`}\n                  aria-hidden=\"true\"\n                  data-qa=\"presence_indicator\"\n                  data-qa-presence-self=\"false\"\n                  data-qa-presence-active=\"false\"\n                  data-qa-presence-dnd=\"false\"\n                />\n                <span className={count > 0 ? 'bold' : undefined}>{member.nickname}</span>\n                {member.id === userData?.id && <span> (나)</span>}\n                {count > 0 && <span className=\"count\">{count}</span>}\n              </NavLink>\n            );\n          })}\n      </div>\n    </>\n  );\n}\n\nexport default React.memo(DMList);\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Redirect, Route, Switch, useParams } from 'react-router';\nimport { fetcher } from '@utils/fetcher';\nimport axios from 'axios';\nimport useSWR from 'swr';\nimport {\n  AddButton,\n  Channels,\n  Chats,\n  Header,\n  LogOutButton,\n  MenuScroll,\n  ProfileImg,\n  ProfileModal,\n  RightMenu,\n  WorkspaceButton,\n  WorkspaceModal,\n  WorkspaceName,\n  Workspaces,\n  WorkspaceWrapper,\n} from './styles';\nimport gravatar from 'gravatar';\nimport loadable from '@loadable/component';\nimport Menu from '@components/Menu/Menu';\nimport { Link } from 'react-router-dom';\nimport { IUser } from '@typings/db';\nimport CreateChannelModal from '@components/CreateChannelModal/CreateChannelModal';\nimport CreateWorkspaceModal from '@components/CreateWorkspaceModal/CreateWorkspaceModal';\nimport InviteWorkspaceModal from '@components/InviteWorkspaceModal/InviteWorkspaceModal';\nimport ChannelList from '@components/ChannelList/ChannelList';\nimport DMList from '@components/DMList/DMList';\nimport useSocket from '@hooks/useSocket';\n\nconst Channel = loadable(() => import('@pages/Channel/Channel'));\nconst DirectMessage = loadable(() => import('@pages/DirectMessage/DirectMessage'));\n\nfunction Workspace() {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: userData, mutate } = useSWR<IUser | false>('/api/users', fetcher);\n  const { data: channelData } = useSWR<IUser[]>(userData ? `/api/workspaces/${workspace}/channels` : null, fetcher);\n\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n  const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);\n  const [showWorkspaceModal, setShowWorkspaceModal] = useState(false);\n  const [showInviteWorkspaceModal, setShowInviteWorkspaceModal] = useState(false);\n  const [showInviteChannelModal, setShowInviteChannelModal] = useState(false);\n\n  const [socket, disconnectSocket] = useSocket(workspace);\n\n  useEffect(() => {\n    if (channelData && userData && socket) {\n      socket.emit('login', { id: userData.id, channels: channelData.map((v) => v.id) });\n    }\n  }, [channelData, socket, userData]);\n\n  useEffect(() => {\n    return () => {\n      disconnectSocket();\n    };\n  }, [disconnectSocket]);\n\n  const onLogout = useCallback(() => {\n    axios.post('/api/users/logout', null, { withCredentials: true }).then(() => mutate(false, false));\n  }, [mutate]);\n\n  const onOpenModalAndMenu = useCallback((e) => {\n    const id = e.target.id;\n    if (id === 'open-ic-btn') return setShowInviteChannelModal(true);\n    if (id === 'open-iws-btn') return setShowInviteWorkspaceModal(true);\n    if (id === 'user-profile') return setShowUserMenu(true);\n    if (id === 'open-ws-btn') return setShowWorkspaceModal(true);\n    if (id === 'open-cws-btn') return setShowCreateWorkspaceModal(true);\n    if (id === 'open-cc-btn') return setShowCreateChannelModal(true);\n  }, []);\n\n  const onCloseModalAndMenu = useCallback(() => {\n    if (showInviteChannelModal) return setShowInviteChannelModal(false);\n    if (showInviteWorkspaceModal) return setShowInviteWorkspaceModal(false);\n    if (showCreateWorkspaceModal) return setShowCreateWorkspaceModal(false);\n    if (showCreateChannelModal) return setShowCreateChannelModal(false);\n    if (showUserMenu) return setShowUserMenu(false);\n    if (showWorkspaceModal) return setShowWorkspaceModal(false);\n  }, [\n    showInviteChannelModal,\n    showInviteWorkspaceModal,\n    showCreateWorkspaceModal,\n    showCreateChannelModal,\n    showUserMenu,\n    showWorkspaceModal,\n  ]);\n\n  if (userData === undefined) return null;\n  if (userData === false) return <Redirect to=\"/login\" />;\n\n  return (\n    <div data-testid=\"workspace-container\" className=\"workspace-container\" onClick={onCloseModalAndMenu}>\n      <Header>\n        <RightMenu>\n          <ProfileImg\n            id=\"user-profile\"\n            data-testid=\"user-profile\"\n            onClick={onOpenModalAndMenu}\n            src={gravatar.url(userData.nickname, { s: '20px', d: 'retro' })}\n            alt={userData.nickname}\n          />\n          <Menu style={{ right: 0, top: 38 }} show={showUserMenu}>\n            <ProfileModal>\n              <img src={gravatar.url(userData.nickname, { s: '20px', d: 'retro' })} alt={userData.nickname} />\n              <div>\n                <span id=\"profile-name\">{userData.nickname}</span>\n                <span id=\"profile-active\">Active</span>\n              </div>\n            </ProfileModal>\n            <LogOutButton onClick={onLogout}>로그아웃</LogOutButton>\n          </Menu>\n        </RightMenu>\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {userData?.Workspaces?.map((ws) => (\n            <Link key={ws.id} to={`/workspace/${ws.url}/channel/일반`}>\n              <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n            </Link>\n          ))}\n          <AddButton id=\"open-cws-btn\" onClick={onOpenModalAndMenu}>\n            +\n          </AddButton>\n        </Workspaces>\n        <Channels>\n          <WorkspaceName id=\"open-ws-btn\" onClick={onOpenModalAndMenu}>\n            Sleact\n          </WorkspaceName>\n          <MenuScroll>\n            <Menu show={showWorkspaceModal} style={{ top: 95, left: 80 }}>\n              <WorkspaceModal>\n                <h2>Sleact</h2>\n                <button id=\"open-iws-btn\" onClick={onOpenModalAndMenu}>\n                  워크스페이스에 사용자 초대\n                </button>\n                <button id=\"open-cc-btn\" onClick={onOpenModalAndMenu}>\n                  채널 만들기\n                </button>\n                <button onClick={onLogout}>로그아웃</button>\n              </WorkspaceModal>\n            </Menu>\n            <ChannelList />\n            <DMList />\n          </MenuScroll>\n        </Channels>\n        <Chats>\n          <Switch>\n            <Route\n              path=\"/workspace/:workspace/channel/:channel\"\n              render={() => (\n                <Channel\n                  show={showInviteChannelModal}\n                  onCloseModal={onCloseModalAndMenu}\n                  onOpenModal={onOpenModalAndMenu}\n                />\n              )}\n            />\n            <Route path=\"/workspace/:workspace/dm/:id\" component={DirectMessage} />\n          </Switch>\n        </Chats>\n      </WorkspaceWrapper>\n      <CreateWorkspaceModal show={showCreateWorkspaceModal} onCloseModal={onCloseModalAndMenu} />\n      <CreateChannelModal show={showCreateChannelModal} onCloseModal={onCloseModalAndMenu} />\n      <InviteWorkspaceModal show={showInviteWorkspaceModal} onCloseModal={onCloseModalAndMenu} />\n    </div>\n  );\n}\n\nexport default React.memo(Workspace);\n","import axios from 'axios';\n\nexport function fetcher(url: string) {\n  return axios.get(url, { withCredentials: true }).then((res) => res.data);\n}\n"],"sourceRoot":""}