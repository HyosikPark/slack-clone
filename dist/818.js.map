{"version":3,"sources":["webpack://frontend/./pages/Channel/styles.ts","webpack://frontend/./components/InviteChannelModal/InviteChannelModal.tsx","webpack://frontend/./pages/Channel/Channel.tsx"],"names":["Container","Header","InviteChannelModal","show","onCloseModal","workspace","channel","useParams","input","useRef","onInviteMember","useCallback","e","preventDefault","current","value","trim","axios","email","withCredentials","then","trigger","catch","err","toast","response","data","position","Modal","onSubmit","id","type","ref","React","Channel","onOpenModal","myData","useSWR","fetcher","channelData","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","channelMembersData","chat","setChat","useState","socket","useSocket","scrollbarRef","isReachingEnd","length","onChangeChat","target","onSubmitForm","savedChat","prevChatData","unshift","content","UserId","User","ChannelId","createdAt","Date","scrollToBottom","console","log","onMessage","name","getScrollHeight","getClientHeight","getScrollTop","getValues","onClick","closeOnClick","useEffect","on","off","chatSections","makeSection","flat","reverse","className","aria-label","data-sk","aria-hidden","ChatList","ChatBox","placeholder"],"mappings":"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","file":"818.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & .header-right {\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n    align-items: center;\n  }\n`;\n","import Modal from '@components/Modal/Modal';\nimport { Button, Input, Label } from '@pages/SignUp/styles';\nimport { SubmitModalProps } from '@typings/db';\nimport axios from 'axios';\nimport React, { useCallback, useRef } from 'react';\nimport { useParams } from 'react-router';\nimport { trigger } from 'swr';\nimport { toast } from 'react-toastify';\n\nfunction InviteChannelModal({ show, onCloseModal }: SubmitModalProps) {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n  const input = useRef<HTMLInputElement>(null);\n\n  const onInviteMember = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!input.current?.value.trim()) return;\n\n      axios\n        .post(\n          `/api/workspaces/${workspace}/channels/${channel}/members`,\n          {\n            email: input.current.value,\n          },\n          { withCredentials: true },\n        )\n        .then(() => {\n          trigger(`/api/workspaces/${workspace}/channels/${channel}/members`);\n          onCloseModal();\n        })\n        .catch((err) => {\n          toast.error(err.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [channel, onCloseModal, workspace],\n  );\n\n  return (\n    <Modal show={show}>\n      <form onSubmit={onInviteMember}>\n        <Label id=\"member-label\">\n          <span>채널 멤버 초대</span>\n          <Input id=\"member\" type=\"email\" ref={input} />\n        </Label>\n        <Button type=\"submit\">초대하기</Button>\n      </form>\n    </Modal>\n  );\n}\n\nexport default React.memo(InviteChannelModal);\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, Header } from './styles';\nimport useSWR, { useSWRInfinite } from 'swr';\nimport { fetcher } from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport ChatList from '@components/ChatList/ChatList';\nimport ChatBox from '@components/ChatBox/ChatBox';\nimport axios from 'axios';\nimport { IChannel, IChat, IUser } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\nimport { toast, ToastContainer } from 'react-toastify';\nimport InviteChannelModal from '@components/InviteChannelModal/InviteChannelModal';\n\ninterface ChannelProps {\n  onOpenModal: (e: any) => void;\n  onCloseModal: () => void;\n  show: boolean;\n}\n\nfunction Channel({ onOpenModal, show, onCloseModal }: ChannelProps) {\n  const { workspace, channel } = useParams<{ workspace: string; channel: string }>();\n\n  const { data: myData } = useSWR(`/api/users`, fetcher);\n  const { data: channelData } = useSWR<IChannel>(`/api/workspaces/${workspace}/channels/${channel}`, fetcher);\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IChat[]>(\n    (index) => `/api/workspaces/${workspace}/channels/${channel}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const { data: channelMembersData } = useSWR<IUser[]>(\n    myData ? `/api/workspaces/${workspace}/channels/${channel}/members` : null,\n  );\n\n  const [chat, setChat] = useState('');\n  const [socket] = useSocket(workspace);\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const onChangeChat = useCallback((e) => {\n    setChat(e.target.value);\n  }, []);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!chat.trim() || !chatData || !channelData) return;\n\n      const savedChat = chat;\n\n      mutateChat((prevChatData) => {\n        prevChatData?.[0].unshift({\n          id: (chatData[0][0]?.id || 0) + 1,\n          content: savedChat,\n          UserId: myData.id,\n          User: myData,\n          ChannelId: channelData.id,\n          Channel: channelData,\n          createdAt: new Date(),\n        });\n\n        return prevChatData;\n      }, false).then(() => {\n        setChat('');\n        scrollbarRef.current?.scrollToBottom();\n      });\n\n      axios\n        .post(`/api/workspaces/${workspace}/channels/${channel}/chats`, {\n          content: chat,\n        })\n        .then(() => revalidate())\n        .catch((err) => console.log(err));\n    },\n    [channel, channelData, chat, chatData, mutateChat, myData, revalidate, workspace],\n  );\n\n  const onMessage = useCallback(\n    (data: IChat) => {\n      // 두번의 mutateChat 방지하기 위해 내 데이터인 경우 배제;\n      if (data.Channel.name === channel && data.UserId !== myData?.id) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          revalidate();\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              scrollbarRef.current.scrollToBottom();\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [channel, mutateChat, myData?.id, revalidate],\n  );\n\n  useEffect(() => {\n    socket?.on('message', onMessage);\n\n    return () => {\n      socket?.off('message', onMessage);\n    };\n  }, [onMessage, socket]);\n\n  useEffect(() => {\n    if (chatData?.length === 1 && scrollbarRef.current) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!myData || !chatData) return null;\n\n  const chatSections = makeSection(chatData.flat().reverse());\n\n  return (\n    <Container>\n      <Header>\n        <span>#{channel}</span>\n        <div className=\"header-right\">\n          <span>{channelMembersData?.length}</span>\n          <button\n            id=\"open-ic-btn\"\n            onClick={onOpenModal}\n            className=\"c-button-unstyled p-ia__view_header__button\"\n            aria-label=\"Add people to #react-native\"\n            data-sk=\"tooltip_parent\"\n            type=\"button\"\n          >\n            <i className=\"c-icon p-ia__view_header__button_icon c-icon--add-user\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      </Header>\n      <ChatList\n        scrollbarRef={scrollbarRef}\n        isReachingEnd={isReachingEnd}\n        chatSections={chatSections}\n        setSize={setSize}\n      />\n      <ChatBox\n        onSubmitForm={onSubmitForm}\n        chat={chat}\n        onChangeChat={onChangeChat}\n        placeholder={`Message #${channel}`}\n      />\n      <InviteChannelModal show={show} onCloseModal={onCloseModal} />\n      <ToastContainer position=\"bottom-center\" />\n    </Container>\n  );\n}\n\nexport default React.memo(Channel);\n"],"sourceRoot":""}