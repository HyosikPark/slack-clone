{"version":3,"sources":["webpack://frontend/./pages/SignUp/SignUp.tsx","webpack://frontend/./utils/Validate.ts"],"names":["SignUp","history","useHistory","email","setEmail","useState","nickname","setNickname","password","setPassword","passwordCheck","setPasswordCheck","mismatchError","setMismatchError","validError","setValidError","signUpError","setSignUpError","onChangeEmail","useCallback","e","target","value","onChangeNickname","onChangePassword","onChangePasswordCheck","onSubmit","async","preventDefault","userInput","errors","valid","blankRegx","match","trim","validateRegister","axios","then","push","catch","id","data-testid","blankInput","Boolean","type","name","onChange","Object","entries","map","key","to","React"],"mappings":"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","file":"520.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { validateRegister } from '@utils/Validate';\nimport { Form, Label, Input, LinkContainer, Button, Header, Error } from '@pages/SignUp/styles';\nimport { ErrorsProps } from '@utils/Validate';\nimport axios from 'axios';\nimport { useHistory, Link } from 'react-router-dom';\n\nfunction SignUp() {\n  const history = useHistory();\n\n  const [email, setEmail] = useState('');\n  const [nickname, setNickname] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordCheck, setPasswordCheck] = useState('');\n  const [mismatchError, setMismatchError] = useState(false);\n  const [validError, setValidError] = useState<ErrorsProps>({ email: '', nickname: '', password: '' });\n  const [signUpError, setSignUpError] = useState(false);\n\n  const onChangeEmail = useCallback(\n    (e) => {\n      if (validError.email) setValidError({ ...validError, email: '' });\n      setEmail(e.target.value);\n    },\n    [validError],\n  );\n\n  const onChangeNickname = useCallback(\n    (e) => {\n      if (validError.nickname) setValidError({ ...validError, nickname: '' });\n      setNickname(e.target.value);\n    },\n    [validError],\n  );\n\n  const onChangePassword = useCallback(\n    (e) => {\n      if (validError.password) setValidError({ ...validError, password: '' });\n      setPassword(e.target.value);\n      setMismatchError(e.target.value !== passwordCheck);\n    },\n    [validError, passwordCheck],\n  );\n\n  const onChangePasswordCheck = useCallback(\n    (e) => {\n      if (validError.password) setValidError({ ...validError, password: '' });\n      setPasswordCheck(e.target.value);\n      setMismatchError(e.target.value !== password);\n    },\n    [password, validError],\n  );\n\n  const onSubmit = useCallback(\n    async (e) => {\n      e.preventDefault();\n\n      setSignUpError(false);\n\n      if (mismatchError) return;\n\n      const userInput = { email, nickname, password };\n      const { errors, valid } = validateRegister(userInput);\n\n      if (!valid) return setValidError(errors);\n\n      axios\n        .post('/api/users', {\n          email,\n          nickname,\n          password,\n        })\n        .then(() => history.push('/login'))\n        .catch(() => setSignUpError(true));\n    },\n\n    [mismatchError, email, nickname, password, history],\n  );\n\n  return (\n    <div id=\"container\">\n      <Header>Slack-clone</Header>\n      <Form data-testid=\"form\" onSubmit={onSubmit}>\n        <Label id=\"email-label\">\n          <span>이메일 주소</span>\n          <Input\n            blankInput={Boolean(validError.email)}\n            type=\"email\"\n            id=\"email\"\n            name=\"email\"\n            value={email}\n            onChange={onChangeEmail}\n          />\n        </Label>\n        <Label id=\"nickname-label\">\n          <span>닉네임</span>\n          <Input\n            blankInput={Boolean(validError.nickname)}\n            type=\"text\"\n            id=\"nickname\"\n            name=\"nickname\"\n            value={nickname}\n            onChange={onChangeNickname}\n          />\n        </Label>\n        <Label id=\"password-label\">\n          <span>비밀번호</span>\n          <Input\n            blankInput={Boolean(validError.password)}\n            type=\"password\"\n            id=\"password\"\n            name=\"password\"\n            value={password}\n            onChange={onChangePassword}\n          />\n        </Label>\n        <Label id=\"password-check-label\">\n          <span>비밀번호 확인</span>\n          <Input\n            blankInput={Boolean(validError.password)}\n            type=\"password\"\n            id=\"password-check\"\n            name=\"password-check\"\n            value={passwordCheck}\n            onChange={onChangePasswordCheck}\n          />\n        </Label>\n        {Object.entries(validError).map(\n          ([key, value]) =>\n            value && (\n              <Error key={key} data-testid={`blank-${key}`}>\n                {value}\n              </Error>\n            ),\n        )}\n        {mismatchError && <Error data-testid=\"mismatch-password\">비밀번호가 일치하지 않습니다.</Error>}\n        {signUpError && <Error>이미 사용 중인 이메일입니다.</Error>}\n        <Button type=\"submit\">회원가입</Button>\n      </Form>\n      <LinkContainer>\n        이미 회원이신가요?&nbsp;\n        <Link to=\"/login\">로그인 하러가기</Link>\n      </LinkContainer>\n    </div>\n  );\n}\n\nexport default React.memo(SignUp);\n","export interface ErrorsProps {\n  nickname: string;\n  email: string;\n  password: string;\n}\n\nexport function validateRegister({ email, nickname, password }: ErrorsProps) {\n  const errors: ErrorsProps = { email: '', nickname: '', password: '' };\n  const blankRegx = /\\s/g;\n  const emailRegx = /^[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\\.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n\n  let valid = true;\n\n  if (!email.match(emailRegx)) {\n    errors.email = '이메일 형식이 올바르지 않습니다.';\n    valid = false;\n  }\n\n  if (email.trim() === '' || email.match(blankRegx)) {\n    errors.email = '이메일을 입력해주세요.';\n    valid = false;\n  }\n\n  if (nickname.trim() === '' || nickname.match(blankRegx)) {\n    errors.nickname = '닉네임을 입력해주세요.';\n    valid = false;\n  }\n\n  if (password.trim() === '' || password.match(blankRegx)) {\n    errors.password = '비밀번호를 입력해주세요.';\n    valid = false;\n  }\n\n  return {\n    errors,\n    valid,\n  };\n}\n\n// module.exports.validateLoginInput = (nickname, password) => {\n//   const errors = {};\n//   const blankRegx = /\\s/g;\n\n//   if (username.trim() === '' || username.match(blankRegx)) {\n//     errors.username = 'username에 공백이 허용되지 않습니다.';\n//   }\n\n//   if (password.trim() === '' || password.match(blankRegx)) {\n//     errors.password = '비밀번호를 입력해주십시오.';\n//   }\n\n//   return {\n//     errors,\n//     valid: Object.keys(errors).length < 1,\n//   };\n// };\n"],"sourceRoot":""}