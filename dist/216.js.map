{"version":3,"sources":["webpack://frontend/./components/ChatBox/styles.ts","webpack://frontend/./components/ChatBox/ChatBox.tsx","webpack://frontend/./components/ChatList/styles.ts","webpack://frontend/./components/Chat/styles.ts","webpack://frontend/./components/Chat/Chat.tsx","webpack://frontend/./components/ChatList/ChatList.tsx","webpack://frontend/./utils/makeSection.ts"],"names":["ChatArea","Form","MentionsTextarea","MentionsInput","Toolbox","SendButton","EachMention","focus","ChatBox","chat","onSubmitForm","onChangeChat","placeholder","workspace","useParams","data","memberData","useSWR","fetcher","textareaRef","useRef","onKeyPressChat","useCallback","e","key","shiftKey","preventDefault","renderSuggestion","suggestion","search","highlightedDisplay","index","src","gravatar","email","s","d","alt","nickname","useEffect","current","autosize","onSubmit","id","value","onKeyPress","onChange","inputRef","allowSuggestionsAboveCursor","appendSpaceOnAdd","trigger","map","v","display","className","trim","data-qa","aria-label","data-sk","type","disabled","area-hidden","React","ChatZone","Section","StickyHeader","ChatWrapper","Chat","user","Sender","User","result","useMemo","regexifyString","pattern","decorator","match","arr","to","input","content","dayjs","createdAt","format","ChatList","chatSections","scrollbarRef","setSize","isReachingEnd","onScroll","values","scrollTop","console","log","prevSize","then","getScrollHeight","scrollHeight","autoHide","ref","onScrollFrame","Object","entries","date","chats","makeSection","chatList","sections","forEach","monthDate","Array","isArray","push"],"mappings":"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","file":"216.js","sourcesContent":["import styled from '@emotion/styled';\nimport { MentionsInput } from 'react-mentions';\n\nexport const ChatArea = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 20px;\n  padding-top: 0;\n`;\n\nexport const Form = styled.form`\n  color: rgb(29, 28, 29);\n  font-size: 15px;\n  width: 100%;\n  border-radius: 4px;\n  border: 1px solid rgb(29, 28, 29);\n`;\n\nexport const MentionsTextarea = styled(MentionsInput)`\n  font-family: Slack-Lato, appleLogo, sans-serif;\n  font-size: 15px;\n  padding: 8px 9px;\n\n  & strong {\n    background: skyblue;\n  }\n\n  & textarea {\n    height: 44px;\n    padding: 9px 10px !important;\n    outline: none !important;\n    border-radius: 4px !important;\n    resize: none !important;\n    line-height: 22px;\n    border: none;\n  }\n\n  & ul {\n    border: 1px solid lightgray;\n    max-height: 200px;\n    overflow-y: auto;\n    padding: 9px 10px;\n    background: white;\n    border-radius: 4px;\n    width: 150px;\n  }\n`;\n\nexport const Toolbox = styled.div`\n  position: relative;\n  background: rgb(248, 248, 248);\n  height: 41px;\n  display: flex;\n  border-top: 1px solid rgb(221, 221, 221);\n  align-items: center;\n  border-bottom-left-radius: 4px;\n  border-bottom-right-radius: 4px;\n`;\n\nexport const SendButton = styled.button`\n  position: absolute;\n  right: 5px;\n  top: 5px;\n`;\n\nexport const EachMention = styled.button<{ focus: boolean }>`\n  padding: 4px 20px;\n  background: transparent;\n  border: none;\n  display: flex;\n  align-items: center;\n  color: rgb(28, 29, 28);\n  width: 100%;\n\n  & img {\n    margin-right: 5px;\n  }\n\n  ${({ focus }) =>\n    focus &&\n    `\n    background: #1264a3;\n    color: white;\n  `};\n`;\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { ChatArea, EachMention, Form, MentionsTextarea, SendButton, Toolbox } from './styles';\nimport { Mention, SuggestionDataItem } from 'react-mentions';\nimport useSWR from 'swr';\nimport { IUser } from '@typings/db';\nimport { fetcher } from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport gravatar from 'gravatar';\nimport autosize from 'autosize';\n\ninterface ChatBoxprops {\n  chat: string;\n  onSubmitForm: (e: any) => void;\n  onChangeChat: (e: any) => void;\n  placeholder: string;\n}\n\nfunction ChatBox({ chat, onSubmitForm, onChangeChat, placeholder }: ChatBoxprops) {\n  const { workspace } = useParams<{ workspace: string }>();\n  const { data: memberData } = useSWR<IUser[]>(`/api/workspaces/${workspace}/members`, fetcher);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const onKeyPressChat = useCallback(\n    (e) => {\n      if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        onSubmitForm(e);\n      }\n    },\n    [onSubmitForm],\n  );\n\n  const renderSuggestion = useCallback(\n    (\n      suggestion: SuggestionDataItem,\n      search: string,\n      highlightedDisplay: React.ReactNode,\n      index: number,\n      focus: boolean,\n    ): React.ReactNode => {\n      if (!memberData) return null;\n\n      return (\n        <EachMention focus={focus}>\n          <img\n            src={gravatar.url(memberData[index].email, { s: '20px', d: 'retro' })}\n            alt={memberData[index].nickname}\n          />\n          <span>{highlightedDisplay}</span>\n        </EachMention>\n      );\n    },\n    [memberData],\n  );\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      autosize(textareaRef.current);\n    }\n  }, []);\n\n  return (\n    <ChatArea>\n      <Form onSubmit={onSubmitForm}>\n        <MentionsTextarea\n          id=\"editor-chat\"\n          value={chat}\n          onKeyPress={onKeyPressChat}\n          onChange={onChangeChat}\n          inputRef={textareaRef}\n          placeholder={placeholder}\n          allowSuggestionsAboveCursor\n        >\n          <Mention\n            appendSpaceOnAdd\n            trigger=\"@\"\n            data={memberData?.map((v) => ({ id: v.id, display: v.nickname })) || []}\n            renderSuggestion={renderSuggestion}\n          />\n        </MentionsTextarea>\n        <Toolbox>\n          <SendButton\n            className={\n              'c-button-unstyled c-icon_button c-icon_button--light c-icon_button--size_medium c-texty_input__button c-texty_input__button--send' +\n              (chat?.trim() ? '' : ' c-texty_input__button--disabled')\n            }\n            data-qa=\"texty_send_button\"\n            aria-label=\"Send message\"\n            data-sk=\"tooltip_parent\"\n            type=\"submit\"\n            disabled={!chat.trim()}\n          >\n            <i className=\"c-icon c-icon--paperplane-filled\" area-hidden=\"true\" />\n          </SendButton>\n        </Toolbox>\n      </Form>\n    </ChatArea>\n  );\n}\n\nexport default React.memo(ChatBox);\n","import styled from '@emotion/styled';\n\nexport const ChatZone = styled.div`\n  width: 100%;\n  display: flex;\n  height: calc(100vh - 236px);\n  overflow: auto;\n  margin-bottom: 20px;\n  border: 1px solid #eee;\n`;\n\nexport const Section = styled.section`\n  width: 100%;\n  margin-top: 20px;\n  padding: 0 20px;\n  border-top: 1px solid #eee;\n`;\n\nexport const StickyHeader = styled.div`\n  display: flex;\n  justify-content: center;\n  flex: 1;\n  width: 100%;\n  position: sticky;\n  top: 14px;\n\n  & button {\n    font-weight: bold;\n    font-size: 13px;\n    height: 28px;\n    line-height: 27px;\n    padding: 0 16px;\n    z-index: 2;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 1px 3px 0 rgba(0, 0, 0, 0.08);\n    border-radius: 24px;\n    position: relative;\n    top: -13px;\n    background: white;\n    border: none;\n    outline: none;\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const ChatWrapper = styled.div`\n  display: flex;\n  padding: 8px 20px;\n\n  &:hover {\n    background: #eee;\n  }\n\n  & .chat-img {\n    display: flex;\n    width: 36px;\n    margin-right: 8px;\n\n    & img {\n      width: 36px;\n      height: 36px;\n    }\n  }\n\n  & .chat-text {\n    display: flex;\n    flex-wrap: wrap;\n    flex: 1;\n\n    & p {\n      flex: 0 0 100%;\n      margin: 0;\n    }\n  }\n\n  & .chat-user {\n    display: flex;\n    flex: 0 0 100%;\n    align-items: center;\n\n    & > b {\n      margin-right: 5px;\n    }\n\n    & > span {\n      font-size: 12px;\n    }\n  }\n\n  & a {\n    text-decoration: none;\n    color: deepskyblue;\n  }\n`;\n","import { IChat, IDM } from '@typings/db';\nimport React, { useMemo } from 'react';\nimport { ChatWrapper } from './styles';\nimport gravatar from 'gravatar';\nimport dayjs from 'dayjs';\nimport { Link, useParams } from 'react-router-dom';\nimport regexifyString from 'regexify-string';\n\ninterface Chatprops {\n  data: IDM | IChat;\n}\n\nfunction Chat({ data }: Chatprops) {\n  const { workspace } = useParams<{ workspace: string }>();\n  const user = 'Sender' in data ? data.Sender : data.User;\n\n  const result = useMemo(\n    () =>\n      regexifyString({\n        pattern: /@\\[(.+?)]\\((\\d+?)\\)|\\n/g,\n        decorator(match, index) {\n          const arr: string[] | null = match.match(/@\\[(.+?)]\\((\\d+?)\\)/);\n          if (arr) {\n            return (\n              <Link key={match + index} to={`/workspace/${workspace}/dm/${arr[2]}`}>\n                @{arr[1]}\n              </Link>\n            );\n          }\n          return <br key={index} />;\n        },\n        input: data.content,\n      }),\n    [data.content, workspace],\n  );\n\n  return (\n    <ChatWrapper>\n      <div className=\"chat-img\">\n        <img src={gravatar.url(user.nickname, { s: '36px', d: 'retro' })} alt={user.nickname} />\n      </div>\n      <div className=\"chat-text\">\n        <div className=\"chat-user\">\n          <b>{user.nickname}</b>\n          <span>{dayjs(data.createdAt).format('h:mm A')}</span>\n        </div>\n        <p>{result}</p>\n      </div>\n    </ChatWrapper>\n  );\n}\n\nexport default React.memo(Chat);\n","import { IChat, IDM } from '@typings/db';\nimport React, { RefObject, useCallback } from 'react';\nimport { ChatZone, Section, StickyHeader } from './styles';\nimport Chat from '@components/Chat/Chat';\nimport { Scrollbars } from 'react-custom-scrollbars';\n\ninterface ChatListProps {\n  chatSections: { [key: string]: (IDM | IChat)[] };\n  scrollbarRef: RefObject<Scrollbars>;\n  setSize: (size: number | ((size: number) => number)) => Promise<(IDM | IChat)[][] | undefined>;\n  isReachingEnd: boolean;\n}\n\nfunction ChatList({ chatSections, scrollbarRef, setSize, isReachingEnd }: ChatListProps) {\n  const onScroll = useCallback(\n    (values) => {\n      if (values.scrollTop === 0 && !isReachingEnd) {\n        console.log('가장 위');\n        setSize((prevSize) => prevSize + 1).then(() => {\n          //스크롤 위치 유지\n          scrollbarRef.current?.scrollTop(scrollbarRef.current?.getScrollHeight() - values.scrollHeight);\n        });\n      }\n    },\n    [isReachingEnd, scrollbarRef, setSize],\n  );\n\n  return (\n    <ChatZone>\n      <Scrollbars autoHide ref={scrollbarRef} onScrollFrame={onScroll}>\n        {Object.entries(chatSections).map(([date, chats]) => {\n          return (\n            <Section className={`section-${date}`} key={date}>\n              <StickyHeader>\n                <button>{date}</button>\n              </StickyHeader>\n              {chats.map((chat) => (\n                <Chat key={chat.id} data={chat}></Chat>\n              ))}\n            </Section>\n          );\n        })}\n      </Scrollbars>\n    </ChatZone>\n  );\n}\n\nexport default React.memo(ChatList);\n","import { IChat, IDM } from '@typings/db';\nimport dayjs from 'dayjs';\n\nexport default function makeSection(chatList: (IDM | IChat)[]) {\n  const sections: { [key: string]: (IDM | IChat)[] } = {};\n\n  chatList.forEach((chat) => {\n    const monthDate = dayjs(chat.createdAt).format('YYYY-MM-DD');\n\n    if (Array.isArray(sections[monthDate])) {\n      sections[monthDate].push(chat);\n    } else {\n      sections[monthDate] = [chat];\n    }\n  });\n\n  return sections;\n}\n"],"sourceRoot":""}