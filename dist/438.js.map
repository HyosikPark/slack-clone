{"version":3,"sources":["webpack://frontend/./pages/DirectMessage/styles.ts","webpack://frontend/./pages/DirectMessage/DirectMessage.tsx"],"names":["Container","Header","DirectMessage","workspace","id","useParams","data","userData","useSWR","fetcher","myData","chatData","mutate","mutateChat","revalidate","setSize","useSWRInfinite","index","chat","setChat","useState","socket","useSocket","scrollbarRef","useRef","isReachingEnd","length","onChangeChat","useCallback","e","target","value","onSubmitForm","preventDefault","trim","savedChat","prevChatData","unshift","content","SenderId","Sender","ReceiverId","Receiver","createdAt","Date","then","current","scrollToBottom","axios","catch","err","console","log","onMessage","Number","getScrollHeight","getClientHeight","getScrollTop","getValues","toast","onClick","closeOnClick","useEffect","on","off","chatSections","makeSection","flat","reverse","src","gravatar","nickname","s","d","alt","ChatList","ChatBox","placeholder","React"],"mappings":"yJAEO,MAAMA,GAAY,cAAH,oBAAG,CAAH,iGAOTC,GAAS,iBAAH,oBAAG,CAAH,iP,mICMnB,SAASC,IACP,MAAM,UAAEC,EAAF,GAAaC,IAAOC,WAElBC,KAAMC,IAAaC,QAAQ,mBAAkBL,WAAmBC,IAAMK,MACtEH,KAAMI,IAAWF,QAAQ,aAAaC,MACtCH,KAAMK,EAAUC,OAAQC,EAA1B,WAAsCC,EAAtC,QAAkDC,IAAYC,SACjEC,GAAW,mBAAkBd,SAAiBC,2BAA4Ba,EAAQ,KACnFR,MAEKS,EAAMC,IAAWC,cAAS,KAC1BC,IAAUC,OAAUnB,GACrBoB,GAAeC,YAAmB,MAGlCC,EADoC,IAA1Bd,IAAW,IAAIe,QACGf,GAAYA,EAASA,EAASe,OAAS,IAAIA,OAAS,KAAO,EAEvFC,GAAeC,kBAAaC,IAChCV,EAAQU,EAAEC,OAAOC,SAChB,IAEGC,GAAeJ,kBAClBC,IAEC,GADAA,EAAEI,kBACGf,EAAKgB,SAAWvB,EAAU,OAE/B,MAAMwB,EAAYjB,EAElBL,GAAYuB,IACVA,IAAe,GAAGC,QAAQ,CACxBjC,IAAKO,EAAS,GAAG,IAAIP,IAAM,GAAK,EAChCkC,QAASH,EACTI,SAAU7B,EAAON,GACjBoC,OAAQ9B,EACR+B,WAAYlC,EAASH,GACrBsC,SAAUnC,EACVoC,UAAW,IAAIC,OAGVR,KACN,GAAOS,MAAK,KACb1B,EAAQ,IACRI,EAAauB,SAASC,oBAGxBC,SACS,mBAAkB7C,SAAiBC,UAAY,CACpDkC,QAASpB,IAEV2B,MAAK,IAAM/B,MACXmC,OAAOC,GAAQC,QAAQC,IAAIF,OAEhC,CAAChC,EAAMP,EAAUP,EAAIS,EAAYH,EAAQI,EAAYP,EAAUJ,IAG3DkD,GAAYzB,kBACftB,IAEKA,EAAKiC,WAAae,OAAOlD,IAAOM,EAAON,KAAOkD,OAAOlD,IACvDS,GAAYF,IACVA,IAAW,GAAG0B,QAAQ/B,GACfK,KACN,GAAOkC,MAAK,KACb/B,IACIS,EAAauB,UAEbvB,EAAauB,QAAQS,kBACrBhC,EAAauB,QAAQU,kBAAoBjC,EAAauB,QAAQW,eAAiB,KAE/EN,QAAQC,IAAI,kBAAmB7B,EAAauB,SAASY,aACrDnC,EAAauB,QAAQC,kBAErBY,aAAc,iBAAkB,CAC9BC,UACErC,EAAauB,SAASC,kBAExBc,cAAc,UAO1B,CAACzD,EAAIS,EAAYH,EAAON,GAAIU,IAiB9B,IAdAgD,gBAAU,KACRzC,GAAQ0C,GAAG,KAAMV,GAEV,KACLhC,GAAQ2C,IAAI,KAAMX,MAEnB,CAACA,EAAWvC,EAAYO,KAE3ByC,gBAAU,KACiB,IAArBnD,GAAUe,QAAgBH,EAAauB,SACzCvB,EAAauB,SAASC,mBAEvB,CAACpC,KAECJ,IAAaG,IAAWC,EAAU,OAAO,KAE9C,MAAMsD,GAAeC,OAAYvD,EAASwD,OAAOC,WAEjD,OACE,QAACpE,EAAD,MACE,QAACC,EAAD,MACE,eAAKoE,IAAKC,QAAa/D,EAASgE,SAAU,CAAEC,EAAG,OAAQC,EAAG,UAAYC,IAAKnE,EAASgE,YACpF,oBAAOhE,EAASgE,YAElB,QAACI,EAAA,EAAD,CACEV,aAAcA,EACd1C,aAAcA,EACdR,QAASA,EACTU,cAAeA,KAEjB,QAACmD,EAAA,EAAD,CACEC,YAAc,WAAUtE,EAASgE,WACjCrD,KAAMA,EACNc,aAAcA,EACdL,aAAcA,KAMtB,QAAemD,OAAW5E","file":"438.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  height: calc(100vh - 38px);\n  flex-flow: column;\n`;\n\nexport const Header = styled.header`\n  height: 64px;\n  display: flex;\n  width: 100%;\n  --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n  box-shadow: 0 1px 0 var(--saf-0);\n  padding: 20px 16px 20px 20px;\n  font-weight: bold;\n  align-items: center;\n\n  & img {\n    margin-right: 5px;\n  }\n`;\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { Container, Header } from './styles';\nimport gravatar from 'gravatar';\nimport useSWR, { useSWRInfinite } from 'swr';\nimport { fetcher } from '@utils/fetcher';\nimport { useParams } from 'react-router';\nimport ChatList from '@components/ChatList/ChatList';\nimport ChatBox from '@components/ChatBox/ChatBox';\nimport axios from 'axios';\nimport { IDM } from '@typings/db';\nimport makeSection from '@utils/makeSection';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport useSocket from '@hooks/useSocket';\nimport { toast } from 'react-toastify';\n\nfunction DirectMessage() {\n  const { workspace, id } = useParams<{ workspace: string; id: string }>();\n\n  const { data: userData } = useSWR(`/api/workspaces/${workspace}/users/${id}`, fetcher);\n  const { data: myData } = useSWR(`/api/users`, fetcher);\n  const { data: chatData, mutate: mutateChat, revalidate, setSize } = useSWRInfinite<IDM[]>(\n    (index) => `/api/workspaces/${workspace}/dms/${id}/chats?perPage=20&page=${index + 1}`,\n    fetcher,\n  );\n  const [chat, setChat] = useState('');\n  const [socket] = useSocket(workspace);\n  const scrollbarRef = useRef<Scrollbars>(null);\n\n  const isEmpty = chatData?.[0]?.length === 0;\n  const isReachingEnd = isEmpty || (chatData && chatData[chatData.length - 1]?.length < 20) || false;\n\n  const onChangeChat = useCallback((e) => {\n    setChat(e.target.value);\n  }, []);\n\n  const onSubmitForm = useCallback(\n    (e) => {\n      e.preventDefault();\n      if (!chat.trim() || !chatData) return;\n\n      const savedChat = chat;\n\n      mutateChat((prevChatData) => {\n        prevChatData?.[0].unshift({\n          id: (chatData[0][0]?.id || 0) + 1,\n          content: savedChat,\n          SenderId: myData.id,\n          Sender: myData,\n          ReceiverId: userData.id,\n          Receiver: userData,\n          createdAt: new Date(),\n        });\n\n        return prevChatData;\n      }, false).then(() => {\n        setChat('');\n        scrollbarRef.current?.scrollToBottom();\n      });\n\n      axios\n        .post(`/api/workspaces/${workspace}/dms/${id}/chats`, {\n          content: chat,\n        })\n        .then(() => revalidate())\n        .catch((err) => console.log(err));\n    },\n    [chat, chatData, id, mutateChat, myData, revalidate, userData, workspace],\n  );\n\n  const onMessage = useCallback(\n    (data: IDM) => {\n      // 두번의 mutateChat 방지하기 위해 내 데이터인 경우 배제;\n      if (data.SenderId === Number(id) && myData.id !== Number(id)) {\n        mutateChat((chatData) => {\n          chatData?.[0].unshift(data);\n          return chatData;\n        }, false).then(() => {\n          revalidate();\n          if (scrollbarRef.current) {\n            if (\n              scrollbarRef.current.getScrollHeight() <\n              scrollbarRef.current.getClientHeight() + scrollbarRef.current.getScrollTop() + 150\n            ) {\n              console.log('scrollToBottom!', scrollbarRef.current?.getValues());\n              scrollbarRef.current.scrollToBottom();\n            } else {\n              toast.success('새 메시지가 도착했습니다.', {\n                onClick() {\n                  scrollbarRef.current?.scrollToBottom();\n                },\n                closeOnClick: true,\n              });\n            }\n          }\n        });\n      }\n    },\n    [id, mutateChat, myData.id, revalidate],\n  );\n\n  useEffect(() => {\n    socket?.on('dm', onMessage);\n\n    return () => {\n      socket?.off('dm', onMessage);\n    };\n  }, [onMessage, revalidate, socket]);\n\n  useEffect(() => {\n    if (chatData?.length === 1 && scrollbarRef.current) {\n      scrollbarRef.current?.scrollToBottom();\n    }\n  }, [chatData]);\n\n  if (!userData || !myData || !chatData) return null;\n\n  const chatSections = makeSection(chatData.flat().reverse());\n\n  return (\n    <Container>\n      <Header>\n        <img src={gravatar.url(userData.nickname, { s: '24px', d: 'retro' })} alt={userData.nickname} />\n        <span>{userData.nickname}</span>\n      </Header>\n      <ChatList\n        chatSections={chatSections}\n        scrollbarRef={scrollbarRef}\n        setSize={setSize}\n        isReachingEnd={isReachingEnd}\n      />\n      <ChatBox\n        placeholder={`Message ${userData.nickname}`}\n        chat={chat}\n        onSubmitForm={onSubmitForm}\n        onChangeChat={onChangeChat}\n      />\n    </Container>\n  );\n}\n\nexport default React.memo(DirectMessage);\n"],"sourceRoot":""}